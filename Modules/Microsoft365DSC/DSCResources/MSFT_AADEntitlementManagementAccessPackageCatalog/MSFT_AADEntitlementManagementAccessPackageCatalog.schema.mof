[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphcustomaccesspackageworkflowextension
{
    [Write, Description("Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow."), EmbeddedInstance("MSFT_MicrosoftGraphcustomextensionauthenticationconfiguration")] String AuthenticationConfiguration;
    [Write, Description("HTTP connection settings that define how long Azure AD can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed."), EmbeddedInstance("MSFT_MicrosoftGraphcustomextensionclientconfiguration")] String ClientConfiguration;
    [Write, Description("Description for the customAccessPackageWorkflowExtension object.")] String Description;
    [Write, Description("Display name for the customAccessPackageWorkflowExtension object.")] String DisplayName;
    [Write, Description("The type and details for configuring the endpoint to call the logic app's workflow."), EmbeddedInstance("MSFT_MicrosoftGraphcustomextensionendpointconfiguration")] String EndpointConfiguration;
    [Write, Description("Identifier for the customAccessPackageWorkflowExtension object.")] String Id;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphcustomextensionauthenticationconfiguration
{
    [Write, Description("The appID of the Azure AD application to use to authenticate a logic app with a custom access package workflow extension.")] String ExtensionResourceId;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphcustomextensionclientconfiguration
{
    [Write, Description("The max duration in milliseconds that Azure AD will wait for a response from the logic app before it shuts down the connection. The valid range is between 200 and 2000 milliseconds. Default duration is 1000.")] UInt32 TimeoutInMilliseconds;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphcustomextensionendpointconfiguration
{
    [Write, Description("The name of the logic app.")] String LogicAppWorkflowName;
    [Write, Description("The Azure resource group name for the logic app.")] String ResourceGroupName;
    [Write, Description("Identifier of the Azure subscription for the logic app.")] String SubscriptionId;
};
[ClassVersion("1.0.0.0"), FriendlyName("AADEntitlementManagementAccessPackageCatalog")]
class MSFT_AADEntitlementManagementAccessPackageCatalog : OMI_BaseResource
{
    [Write, Description("The id of the access package catalog.")] String Id;
    [Write, Description("Has the value Published if the access packages are available for management.")] String CatalogStatus;
    [Write, Description("One of UserManaged or ServiceDefault."), ValueMap{"UserManaged","ServiceDefault"}, Values{"UserManaged","ServiceDefault"}] String CatalogType;
    [Write, Description("The description of the access package catalog.")] String Description;
    [Write, Description("The display name of the access package catalog.")] String DisplayName;
    [Write, Description("Whether the access packages in this catalog can be requested by users outside of the tenant.")] Boolean IsExternallyVisible;
    [Write, Description("The collection of stages when to execute one or more custom access package workflow extensions."), EmbeddedInstance("MSFT_MicrosoftGraphcustomaccesspackageworkflowextension")] String CustomAccessPackageWorkflowExtension[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Intune Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
	[Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
